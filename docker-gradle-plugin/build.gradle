apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = 'com.alexecollins.docker.gradleplugin'
version = '1.0.0-SNAPSHOT'

ext {
    localRepoDir = new File(buildDir, 'localRepo')
    generatedTestResourcesDir = new File(buildDir, 'testResources')
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile('com.alexecollins.docker:docker-java-orchestration-core:2.5.0-SNAPSHOT')

    testCompile localGroovy()
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0', {exclude module: 'groovy-all'}
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
    }
}

class WriteTestConfig extends DefaultTask {

    @OutputFile
    File getTestConfigPropertiesFile() {
        new File(project.generatedTestResourcesDir, 'test-config.properties')
    }

    @Input
    Properties getTestConfig() {
        def testConfigProperties = new Properties()
        testConfigProperties["localRepo.uri"] = project.localRepoDir.toURI().toString()
        testConfigProperties
    }

    @TaskAction
    def generate() {
        testConfigPropertiesFile.withOutputStream { testConfig.store(it, null) }
    }
}

task writeTestConfig(type: WriteTestConfig)

processIntegrationTestResources.dependsOn writeTestConfig

task integrationTest(type: Test) {
    dependsOn install
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
}

check.dependsOn integrationTest

install {
    repositories {
        mavenDeployer {
            repository(url: localRepoDir.toURI())
        }
    }
}